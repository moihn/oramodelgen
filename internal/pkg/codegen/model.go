package codegen

import (
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/moihn/oramodelgen/internal/pkg/dbmodel"
)

type CodegenColumnModel struct {
	ColumnName          string
	ColumnLowerName     string
	ColumnFieldName     string
	ColumnVariableName  string
	ColumnIsPrimaryKey  bool
	ColumnAutoGenerated bool
	// ColumnType          string
	ColumnGoType string
}

type CodegenConstraintModel struct {
	ConstraintName       string
	ConstraintLowerName  string
	ConstraintIndex      *CodegenIndexModel
	ConstraintMethodName string
	ConstraintColumns    []*CodegenColumnModel
}

type CodegenIndexModel struct {
	IndexName       string
	IndexLowerName  string
	IndexMethodName string
	IndexColumns    []*CodegenColumnModel
	IndexUnique     bool
}

type CodegenTableModel struct {
	Package             string
	TableName           string
	TableLowerName      string
	TableStructName     string
	TableObjectName     string
	TableColumnList     []*CodegenColumnModel
	TableIndexList      []*CodegenIndexModel
	TableConstraintList []*CodegenConstraintModel
}

func resolveGoDataType(column *dbmodel.DbColumnModel) string {
	switch {
	case column.Type == dbmodel.Blob_t || column.Type == dbmodel.Char_t || column.Type == dbmodel.Clob_t || column.Type == dbmodel.Varchar_t:
		return "string"
	case column.Type == dbmodel.Date_t:
		return "time.Time"
	case column.Type == dbmodel.Long_t:
		return "int64"
	case column.Type == dbmodel.Float_t:
		return "flat32"
	default:
		return "string"
	}
}

func FromDbModel(tableModel dbmodel.DbTableModel) CodegenTableModel {
	codegenModel := CodegenTableModel{
		TableName:      tableModel.Name,
		TableLowerName: strings.ToLower(tableModel.Name),
	}
	codegenModel.TableStructName = strcase.ToCamel(codegenModel.TableLowerName)
	codegenModel.TableObjectName = strcase.ToLowerCamel(codegenModel.TableLowerName)
	columnMap := map[string]*CodegenColumnModel{}
	for _, dbCol := range tableModel.Columns {
		codegenCol := &CodegenColumnModel{
			ColumnName:          dbCol.Name,
			ColumnLowerName:     strings.ToLower(dbCol.Name),
			ColumnIsPrimaryKey:  dbCol.IsPrimaryKey,
			ColumnAutoGenerated: dbCol.AutoGenerated,
			// ColumnType:          dbCol.Type,
			ColumnGoType: resolveGoDataType(dbCol),
		}
		codegenCol.ColumnFieldName = strcase.ToCamel(codegenCol.ColumnLowerName)
		codegenCol.ColumnVariableName = strcase.ToLowerCamel(codegenCol.ColumnLowerName)
		codegenModel.TableColumnList = append(codegenModel.TableColumnList, codegenCol)
		columnMap[codegenCol.ColumnName] = codegenCol
	}

	indexMap := map[string]*CodegenIndexModel{}
	for _, dbIndex := range tableModel.Indexes {
		if dbIndex.Unique { // we only need to care about unique index for generating GetBy method for now
			codegenIndex := &CodegenIndexModel{
				IndexName:      dbIndex.Name,
				IndexLowerName: strings.ToLower(dbIndex.Name),
				IndexUnique:    dbIndex.Unique,
			}
			codegenIndex.IndexMethodName = "GetBy"
			for _, dbIndexCol := range dbIndex.Columns {
				codegenIndex.IndexColumns = append(codegenIndex.IndexColumns, columnMap[dbIndexCol.Name])
				codegenIndex.IndexMethodName += strcase.ToCamel(dbIndexCol.Name)
			}
			codegenModel.TableIndexList = append(codegenModel.TableIndexList, codegenIndex)
			indexMap[codegenIndex.IndexName] = codegenIndex
		}
	}

	for _, dbConstraint := range tableModel.Constraints {
		if dbConstraint.ReferencedTable != nil { // we only need to care about FK to generate likely to be used PopulateBy method for now
			codegenConstraint := &CodegenConstraintModel{
				ConstraintName:      dbConstraint.Name,
				ConstraintLowerName: strings.ToLower(dbConstraint.Name),
				ConstraintIndex:     indexMap[dbConstraint.Index.Name],
			}
			codegenConstraint.ConstraintMethodName = "PopulateBy"
			for _, dbConstraintCol := range dbConstraint.Columns {
				codegenConstraint.ConstraintColumns = append(codegenConstraint.ConstraintColumns, columnMap[dbConstraintCol.Name])
				codegenConstraint.ConstraintMethodName += strcase.ToCamel(dbConstraintCol.Name)
			}
			codegenModel.TableConstraintList = append(codegenModel.TableConstraintList, codegenConstraint)
		}
	}
	return codegenModel
}
