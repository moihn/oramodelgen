package {{.Package}}

import (
    "database/sql"
    "fmt"
    {{- range .Imports}}
    "{{.}}"
    {{- end}}
)

type {{.QueryRowStructName}} struct {
    {{- range .QueryColumnList}}
    {{.ColumnFieldName}}  {{.ColumnGoType}}
    {{- end}}
}

func {{.QueryMethodName}}(
    tx *sql.Tx,
    {{- range .QueryParameterList}}
    {{.VariableName}} {{.GoType}},
    {{- end}}
) ([]*{{$.QueryRowStructName}}, error) {
    sqlQuery := `{{.QueryString}}`
    rows, err := tx.Query(sqlQuery,
        {{- range .QueryParameterList}}
        sql.Named("{{.VariableName}}", {{.VariableName}}),
        {{- end}}
    )
    if err != nil {
        return nil, fmt.Errorf("failed to run query: %v [%v]", err, sqlQuery)
    }
    defer rows.Close()
    result := []*{{$.QueryRowStructName}}{}
    if rows.Next() {
        row := {{$.QueryRowStructName}}{}
        if err := rows.Scan(
            {{- range $.QueryColumnList}}
            &row.{{.ColumnFieldName}},
            {{- end}}
        ); err != nil {
            return nil, fmt.Errorf("failed to extract query result: %v [%v]", err, sqlQuery)
        }
        result = append(result, &row)
    }
    return result, nil
}
