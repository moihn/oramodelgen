package query

import (
	"database/sql"
	"strings"
	"time"

	"github.com/moihn/oramodelgen/internal/pkg/config"
	"github.com/moihn/oramodelgen/internal/pkg/dbmodel"
	"github.com/moihn/oramodelgen/internal/pkg/modelgen/table"
	"github.com/sirupsen/logrus"
)

func getSampleDataForType(datatype string) interface{} {
	switch strings.ToUpper(datatype) {
	case "DATE":
		return time.Now()
	case "INT":
		return 123
	case "FLOAT":
		return 1.23
	case "STRING":
		return "abc"
	}
	logrus.Fatalf("Unsupported query parameter type: %v", datatype)
	return nil // dummy return
}

func GenerateQueryModels(tx *sql.Tx, queries []config.QueryDef) []dbmodel.DbQueryModel {
	queryModels := []dbmodel.DbQueryModel{}
	for _, queryDef := range queries {
		queryModels = append(queryModels, GenerateQueryModel(tx, queryDef))
	}
	return queryModels
}

func GenerateQueryModel(tx *sql.Tx, queryDef config.QueryDef) dbmodel.DbQueryModel {
	sqlQuery := queryDef.Query
	parameters := []interface{}{}
	for _, param := range queryDef.Parameters {
		parameters = append(parameters, sql.Named(param.Name, getSampleDataForType(param.Type)))
	}
	rows, err := tx.Query(sqlQuery, parameters...)
	if err != nil {
		logrus.Fatalf("Error happened in query: %v [%v]", err, sqlQuery)
	}
	defer rows.Close()
	columnNames, err := rows.Columns()
	if err != nil {
		logrus.Fatalf("failed getting query output column names: %v [%v]", err, sqlQuery)
	}
	columnTypes, err := rows.ColumnTypes()
	if err != nil {
		logrus.Fatalf("failed getting query output column types: %v [%v]", err, sqlQuery)
	}
	columns := []*dbmodel.DbColumnModel{}
	for index, colName := range columnNames {
		colType := columnTypes[index]
		var pScale *int
		nullable := false
		if _, scale, ok := colType.DecimalSize(); ok {
			scaleInt := int(scale)
			pScale = &scaleInt
		}
		if colNullable, ok := colType.Nullable(); ok {
			nullable = colNullable
		}
		columns = append(columns, &dbmodel.DbColumnModel{
			Name:          strings.ToUpper(colName),
			Type:          table.ResolveDataType(colType.DatabaseTypeName(), pScale),
			Nullable:      nullable,
			IsPrimaryKey:  false,
			AutoGenerated: false,
		})
	}
	return dbmodel.DbQueryModel{
		Name:    queryDef.Name,
		Columns: columns,
	}
}
